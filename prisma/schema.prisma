generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  postType  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  likes     Like[]
  comments  Comment[]

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(64)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique @default(cuid()) @db.VarChar(30)
  biography     String    @default("") @db.VarChar(200)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followers     Follow[]  @relation("UserFollowings")
  followings    Follow[]  @relation("UserFollowers")
}

model Follow {
  id          String @id @default(cuid())
  followingId String
  followerId  String

  following User @relation("UserFollowings", fields: [followingId], references: [id])
  follower  User @relation("UserFollowers", fields: [followerId], references: [id])

  @@unique([followingId, followerId])
  @@index([followerId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
